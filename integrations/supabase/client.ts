
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL;
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY;

// Optimized Supabase client configuration
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
    flowType: 'pkce' // More secure flow
  },
  db: {
    schema: 'public'
  },
  global: {
    headers: {
      'X-Client-Info': 'learn-and-earn@1.0.0'
    }
  },
  realtime: {
    params: {
      eventsPerSecond: 5 // Limit realtime events for performance
    }
  }
});

// Enhanced error handling helper
export const handleSupabaseError = (error: any, context?: string) => {
  console.error(`Supabase error ${context ? `in ${context}` : ''}:`, error);
  
  // Handle specific error types
  if (error?.code === 'PGRST116') {
    return 'No data found or access denied';
  } else if (error?.code === '23505') {
    return 'This data already exists';
  } else if (error?.code === '23503') {
    return 'Cannot delete - this item is being used elsewhere';
  } else if (error?.message?.includes('JWT')) {
    return 'Session expired - please login again';
  }
  
  return error?.message || 'An unexpected error occurred';
};

// Connection health check
export const checkSupabaseConnection = async (): Promise<boolean> => {
  try {
    const { error } = await supabase.from('courses').select('count').limit(1);
    return !error;
  } catch (error) {
    console.error('Supabase connection check failed:', error);
    return false;
  }
};
